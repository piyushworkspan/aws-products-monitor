name: AWS Products Monitor

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

env:
  MONITORED_FILE_URL: 'https://raw.githubusercontent.com/piyushworkspan/AWSCheck/main/aws_products.json'
  JIRA_PROJECT_KEY: 'PMT'
  MONITOR_NAME: 'AWS Products'

jobs:
  monitor-file-changes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Display Configuration
      run: |
        echo "AWS Products Monitor - Every 5 minutes (testing)"
        echo "File: ${{ env.MONITORED_FILE_URL }}"
        echo "JIRA Project: ${{ env.JIRA_PROJECT_KEY }}"
        
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install requests openai jira python-dotenv
        
    - name: Download current file
      run: |
        echo "Downloading AWS products file..."
        curl -s "${{ env.MONITORED_FILE_URL }}" > current_file.json
        
        if [ -s current_file.json ]; then
          echo "File downloaded successfully"
          wc -c current_file.json
        else
          echo "Download failed"
          exit 1
        fi
        
    - name: Get previous baseline
      uses: actions/download-artifact@v4
      with:
        name: aws-products-baseline
        path: ./
      continue-on-error: true
      
    - name: Detect changes
      id: detect_changes
      run: |
        if [ -f "previous_file.json" ]; then
          echo "Comparing with previous version..."
          
          if ! cmp -s "previous_file.json" "current_file.json"; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "CHANGES DETECTED!"
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi
        else
          echo "No baseline found - first run"
          echo "changes_detected=false" >> $GITHUB_OUTPUT
          echo "first_run=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Create JIRA ticket
      if: steps.detect_changes.outputs.changes_detected == 'true'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        JIRA_URL: ${{ secrets.JIRA_URL }}
      run: |
        cat > analyze.py << 'PYTHON_SCRIPT'
        import json
        import os
        import hashlib
        from datetime import datetime
        from openai import OpenAI
        from jira import JIRA
        
        print("Starting analysis...")
        
        # Load files
        with open('previous_file.json', 'r') as f:
            previous_data = json.load(f)
        with open('current_file.json', 'r') as f:
            current_data = json.load(f)
        
        # Generate hashes
        prev_hash = hashlib.sha256(json.dumps(previous_data, sort_keys=True).encode()).hexdigest()[:8]
        curr_hash = hashlib.sha256(json.dumps(current_data, sort_keys=True).encode()).hexdigest()[:8]
        
        print(f"Hash change: {prev_hash} -> {curr_hash}")
        
        # AI Analysis
        try:
            client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
            
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Analyze AWS product catalog changes."},
                    {"role": "user", "content": f"AWS products file updated. Hash changed from {prev_hash} to {curr_hash}. Provide brief analysis of likely changes for WorkSpan integration team."}
                ],
                temperature=0.1,
                max_tokens=200
            )
            
            ai_summary = response.choices[0].message.content
            print("AI analysis completed")
            
        except Exception as e:
            print(f"AI analysis failed: {e}")
            ai_summary = "AWS products catalog updated - manual review recommended"
        
        # Create JIRA ticket
        try:
            jira = JIRA(
                server=os.getenv('JIRA_URL'),
                basic_auth=(os.getenv('JIRA_EMAIL'), os.getenv('JIRA_API_TOKEN'))
            )
            
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            description = f"""AWS Products Update Detected
        
        Detection Time: {timestamp} UTC
        File Hash Change: {prev_hash} -> {curr_hash}
        
        AI Analysis:
        {ai_summary}
        
        Action Items:
        1. Review AWS products file for changes
        2. Update WorkSpan integration mappings
        3. Test partner opportunity matching
        4. Verify new service availability
        
        Resources:
        - AWS Products File: https://github.com/aws-samples/partner-crm-integration-samples/blob/main/resources/aws_products.json
        - Monitor Repository: https://github.com/{os.getenv('GITHUB_REPOSITORY', 'repo')}
        
        Auto-generated by AWS Products Monitor"""
            
            issue = jira.create_issue(fields={
                'project': {'key': 'PMT'},
                'summary': f"AWS Products Updated - {timestamp}",
                'description': description,
                'issuetype': {'name': 'Task'},
                'priority': {'name': 'Medium'}
            })
            
            print(f"JIRA ticket created: {issue.key}")
            print(f"URL: {os.getenv('JIRA_URL')}/browse/{issue.key}")
            
        except Exception as e:
            print(f"JIRA creation failed: {e}")
        
        print("Analysis complete")
        PYTHON_SCRIPT
        
        python analyze.py
        
    - name: Store new baseline
      uses: actions/upload-artifact@v4
      with:
        name: aws-products-baseline
        path: current_file.json
        retention-days: 90
        overwrite: true
        
    - name: Summary
      run: |
        echo "=== AWS Products Monitor Summary ==="
        
        if [ "${{ steps.detect_changes.outputs.changes_detected }}" = "true" ]; then
          echo "CHANGES DETECTED - JIRA ticket created"
        elif [ "${{ steps.detect_changes.outputs.first_run }}" = "true" ]; then
          echo "FIRST RUN - Baseline established"
        else
          echo "NO CHANGES - File unchanged"
        fi
        
        echo "Next check: In 5 minutes"
