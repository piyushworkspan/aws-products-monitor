# .github/workflows/aws-products-monitor.yml
name: AWS Products Monitor

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:  # Allow manual trigger
  
env:
  MONITORED_FILE_URL: "https://raw.githubusercontent.com/aws-samples/partner-crm-integration-samples/main/resources/aws_products.json"

jobs:
  monitor-aws-products:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install requests openai jira python-dotenv
        
    - name: Download current AWS products file
      run: |
        curl -s "$MONITORED_FILE_URL" > current_aws_products.json
        
    - name: Check if previous version exists
      id: check_previous
      run: |
        if [ -f "previous_aws_products.json" ]; then
          echo "has_previous=true" >> $GITHUB_OUTPUT
        else
          echo "has_previous=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Compare files and detect changes
      id: detect_changes
      run: |
        if [ "${{ steps.check_previous.outputs.has_previous }}" = "true" ]; then
          if ! cmp -s "previous_aws_products.json" "current_aws_products.json"; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "üö® Changes detected in AWS products file!"
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No changes detected"
          fi
        else
          echo "changes_detected=false" >> $GITHUB_OUTPUT
          echo "üìÅ First run - setting baseline"
        fi
        
    - name: Analyze changes with AI and create JIRA ticket
      if: steps.detect_changes.outputs.changes_detected == 'true'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        JIRA_URL: ${{ secrets.JIRA_URL }}
        ENGINEERING_MANAGER_EMAIL: ${{ secrets.ENGINEERING_MANAGER_EMAIL }}
      run: |
        python << 'EOF'
        import json
        import os
        import requests
        from datetime import datetime
        from openai import OpenAI
        from jira import JIRA
        
        print("ü§ñ Starting AI analysis and JIRA integration...")
        
        # Load data files
        with open('previous_aws_products.json', 'r') as f:
            previous_data = json.load(f)
        with open('current_aws_products.json', 'r') as f:
            current_data = json.load(f)
        
        print(f"üìä Previous data: {len(str(previous_data))} chars")
        print(f"üìä Current data: {len(str(current_data))} chars")
        
        # Initialize OpenAI client
        openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
        # Create shorter data samples for AI analysis (to fit token limits)
        def truncate_data(data, max_chars=1500):
            data_str = json.dumps(data, indent=2)
            if len(data_str) > max_chars:
                return data_str[:max_chars] + "...[truncated]"
            return data_str
        
        previous_sample = truncate_data(previous_data)
        current_sample = truncate_data(current_data)
        
        # AI Analysis prompt
        prompt = f"""
        Analyze changes in this AWS products JSON file:
        
        PREVIOUS VERSION:
        {previous_sample}
        
        CURRENT VERSION:
        {current_sample}
        
        Provide analysis in this exact JSON format:
        {{
            "summary": "Brief summary of key changes detected",
            "total_changes": 1,
            "priority": "medium",
            "changes": [
                {{
                    "change_type": "modified",
                    "product_name": "AWS Products Catalog", 
                    "details": "Products catalog updated with new or modified services",
                    "impact_level": "medium"
                }}
            ],
            "action_items": [
                "Review updated AWS products catalog",
                "Update WorkSpan integration mappings as needed",
                "Test affected partner integrations"
            ],
            "workspan_updates_needed": [
                "Review product catalog changes in WorkSpan admin",
                "Update partner opportunity matching rules if needed",
                "Refresh product metadata and descriptions"
            ]
        }}
        
        Focus on identifying what specifically changed and provide actionable insights.
        """
        
        try:
            print("üß† Requesting AI analysis...")
            
            # Get AI analysis
            response = openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are analyzing AWS product catalog changes for WorkSpan integration. Provide detailed, actionable analysis in the exact JSON format requested."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1,
                max_tokens=1000
            )
            
            analysis_text = response.choices[0].message.content
            print(f"ü§ñ AI Response received: {len(analysis_text)} chars")
            
            # Extract JSON from response
            start = analysis_text.find('{')
            end = analysis_text.rfind('}') + 1
            if start >= 0 and end > start:
                analysis = json.loads(analysis_text[start:end])
            else:
                raise ValueError("Could not find valid JSON in AI response")
            
            print(f"‚úÖ AI Analysis Complete:")
            print(f"üìä Changes: {analysis['total_changes']}")
            print(f"üéØ Priority: {analysis['priority']}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è AI analysis failed, using fallback: {e}")
            # Fallback analysis
            analysis = {
                "summary": "AWS products catalog updated - manual review recommended",
                "total_changes": 1,
                "priority": "medium",
                "changes": [
                    {
                        "change_type": "modified",
                        "product_name": "AWS Products Catalog",
                        "details": "File modified, specific changes require manual review",
                        "impact_level": "medium"
                    }
                ],
                "action_items": [
                    "Manually review AWS products file changes",
                    "Update WorkSpan system as needed",
                    "Test partner integrations"
                ],
                "workspan_updates_needed": [
                    "Review changes in WorkSpan admin interface",
                    "Update product mappings if needed"
                ]
            }
        
        try:
            print("üé´ Creating JIRA ticket...")
            
            # Create JIRA ticket
            jira = JIRA(
                server=os.getenv('JIRA_URL'),
                basic_auth=(os.getenv('JIRA_EMAIL'), os.getenv('JIRA_API_TOKEN'))
            )
            
            # Build ticket description
            description = f"""# Executive Summary
        {analysis['summary']}
        
        # Change Overview
        * **Total Changes:** {analysis['total_changes']}
        * **Priority Level:** {analysis['priority'].upper()}
        * **Detection Time:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC
        * **Source:** GitHub Actions Automation
        
        # Detailed Changes
        """
            
            for change in analysis['changes']:
                description += f"* **{change['change_type'].upper()}**: {change['product_name']} - {change['details']} (Impact: {change['impact_level']})\n"
            
            description += f"""
        # Action Items Required
        """
            
            for i, action in enumerate(analysis['action_items'], 1):
                description += f"{i}. {action}\n"
            
            description += f"""
        # WorkSpan Updates Needed  
        """
            
            for i, update in enumerate(analysis['workspan_updates_needed'], 1):
                description += f"{i}. {update}\n"
            
            description += f"""
        # Resources
        * [AWS Products Repository](https://github.com/aws-samples/partner-crm-integration-samples/blob/main/resources/aws_products.json)
        * [GitHub Actions Workflow](https://github.com/${{ github.repository }}/actions)
        * Generated automatically by GitHub Actions
        
        # Next Steps
        1. **Engineering Manager**: Review changes and plan implementation  
        2. **Product Manager**: Update WorkSpan system per action items
        3. **QA Team**: Test integrations after changes
        4. **Close ticket** when all updates are completed
        """
            
            # Create JIRA issue
            issue_dict = {
                'project': {'key': 'PMT'},
                'summary': f"AWS Products Update - {analysis['total_changes']} changes detected ({datetime.now().strftime('%Y-%m-%d')})",
                'description': description,
                'issuetype': {'name': 'Task'},
                'priority': {'name': 'Medium' if analysis['priority'] == 'medium' else analysis['priority'].title()}
            }
            
            new_issue = jira.create_issue(fields=issue_dict)
            
            # Add labels
            try:
                new_issue.update(fields={'labels': ['aws-products', 'automation', 'workspan-update', 'github-actions']})
            except:
                pass  # Labels are optional
            
            print(f"‚úÖ JIRA Ticket Created: {new_issue.key}")
            print(f"üîó URL: {os.getenv('JIRA_URL')}/browse/{new_issue.key}")
            
            # Save success info
            ticket_info = {
                'ticket_key': new_issue.key,
                'ticket_url': f"{os.getenv('JIRA_URL')}/browse/{new_issue.key}",
                'summary': analysis['summary'],
                'changes': analysis['total_changes'],
                'priority': analysis['priority'],
                'created_at': datetime.now().isoformat()
            }
            
            with open('ticket_created.json', 'w') as f:
                json.dump(ticket_info, f, indent=2)
                
        except Exception as e:
            print(f"‚ùå JIRA ticket creation failed: {e}")
            
            # Try to create a simpler fallback ticket
            try:
                fallback_issue = jira.create_issue(fields={
                    'project': {'key': 'PMT'},
                    'summary': f"AWS Products Changed - Manual Review Required ({datetime.now().strftime('%Y-%m-%d')})",
                    'description': f"AWS products file changed but automated processing failed.\n\nError: {str(e)}\n\nPlease review manually: https://github.com/aws-samples/partner-crm-integration-samples/blob/main/resources/aws_products.json",
                    'issuetype': {'name': 'Task'},
                    'priority': {'name': 'Medium'}
                })
                
                print(f"üé´ Fallback Ticket Created: {fallback_issue.key}")
                
            except Exception as fallback_error:
                print(f"‚ùå Even fallback ticket failed: {fallback_error}")
        
        EOF
        
    - name: Send notification
      if: steps.detect_changes.outputs.changes_detected == 'true'
      run: |
        if [ -f "ticket_created.json" ]; then
          echo "üìß SUCCESS: JIRA ticket created for AWS products changes"
          cat ticket_created.json
        else
          echo "‚ö†Ô∏è JIRA ticket creation may have failed - check previous step logs"
        fi
        
    - name: Update baseline file
      run: |
        cp current_aws_products.json previous_aws_products.json
        
    - name: Commit updated baseline
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "Update AWS products baseline [skip ci]"
        file_pattern: previous_aws_products.json
        skip_dirty_check: true
        
    - name: Workflow Summary
      run: |
        echo "## üìã AWS Products Monitor Summary"
        if [ "${{ steps.detect_changes.outputs.changes_detected }}" = "true" ]; then
          echo "‚úÖ Changes detected and processed"
          echo "üé´ JIRA ticket should be created"
          echo "üìß Check PMT project for new ticket"
        else
          echo "‚úÖ No changes detected - monitoring successful"
          echo "üìÅ Baseline file updated"
        fi
        echo ""
        echo "Next check: In 6 hours (automatic)"
        echo "Manual trigger: Repository ‚Üí Actions ‚Üí Run workflow"
