name: AWS Products Monitor

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

env:
  MONITORED_FILE_URL: 'https://raw.githubusercontent.com/piyushworkspan/AWSCheck/main/aws_products.json'

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Display Configuration
      run: |
        echo "AWS Products Monitor - Multiple Recipients"
        echo "File: ${{ env.MONITORED_FILE_URL }}"
        echo "Recipients: ${{ vars.EMAIL_RECIPIENTS || 'Not configured' }}"
        echo "CC: ${{ vars.EMAIL_CC_LIST || 'None' }}"
        echo "BCC: ${{ vars.EMAIL_BCC_LIST || 'None' }}"
        echo "Time: $(date)"
        
    - name: Install Python dependencies
      run: |
        pip install requests openai
        
    - name: Create monitor script
      run: |
        cat > monitor.py << 'EOF'
        import json
        import os
        import hashlib
        import requests
        from datetime import datetime
        
        print("AWS Products Monitor Starting...")
        
        # Download current file
        file_url = os.getenv('MONITORED_FILE_URL')
        print(f"Downloading: {file_url}")
        
        try:
            response = requests.get(file_url, timeout=30)
            response.raise_for_status()
            current_data = response.json()
            print(f"Downloaded: {len(str(current_data))} characters")
        except Exception as e:
            print(f"Download failed: {e}")
            exit(1)
        
        # Calculate file hash
        json_string = json.dumps(current_data, sort_keys=True)
        current_hash = hashlib.sha256(json_string.encode()).hexdigest()[:16]
        print(f"Current hash: {current_hash}")
        
        # Check for previous hash
        baseline_file = 'file_baseline.txt'
        previous_hash = None
        
        if os.path.exists(baseline_file):
            with open(baseline_file, 'r') as f:
                previous_hash = f.read().strip()
            print(f"Previous hash: {previous_hash}")
        else:
            print("No previous baseline found - first run")
        
        # Save current hash as new baseline
        with open(baseline_file, 'w') as f:
            f.write(current_hash)
        
        # Determine if notification is needed
        should_notify = False
        change_type = "none"
        
        if previous_hash is None:
            print("First run detected - will send setup notification")
            should_notify = True
            change_type = "first_run"
        elif previous_hash != current_hash:
            print(f"Change detected: {previous_hash} -> {current_hash}")
            should_notify = True  
            change_type = "file_changed"
        else:
            print("No changes detected")
            should_notify = False
            change_type = "no_change"
        
        # Create notification if needed
        if should_notify:
            print("Preparing email notification...")
            
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
            
            if change_type == "first_run":
                subject = f"AWS Products Monitor - Setup Complete ({datetime.now().strftime('%m/%d %H:%M')})"
                body = f"""AWS Products Monitor Setup Complete
        =====================================
        
        Setup Time: {timestamp}
        File URL: {file_url}
        Baseline Hash: {current_hash}
        
        MONITOR STATUS: 
        The AWS Products Monitor is now active and operational.
        
        WHAT HAPPENS NEXT:
        - Monitor checks for file changes every 5 minutes
        - When changes are detected, you will receive email alerts
        - Each alert will include analysis and action items
        
        RECIPIENT CONFIGURATION:
        To modify who receives notifications:
        1. Go to repository Settings
        2. Navigate to Secrets and variables -> Actions -> Variables  
        3. Edit these variables:
           - EMAIL_RECIPIENTS (primary recipients)
           - EMAIL_CC_LIST (CC recipients)
           - EMAIL_BCC_LIST (BCC recipients)
        
        RESOURCES:
        - Monitored file: {file_url}
        - WorkSpan admin: https://app.workspan.com/
        
        This is a one-time setup notification.
        Future emails will only be sent when the file actually changes.
        
        ---
        AWS Products Monitor | Automated by GitHub Actions"""
                
            else:  # file_changed
                subject = f"AWS Products CHANGED - Review Required ({datetime.now().strftime('%m/%d %H:%M')})"
                body = f"""AWS PRODUCTS FILE CHANGED - ACTION REQUIRED
        ==========================================
        
        Change Detected: {timestamp}
        Hash Change: {previous_hash} -> {current_hash}
        File URL: {file_url}
        
        IMMEDIATE ACTIONS REQUIRED:
        
        FOR PRODUCT TEAM:
        1. Review AWS products catalog for new/modified services
        2. Identify new partner opportunity types
        3. Assess impact on existing WorkSpan configurations
        4. Brief stakeholders on significant changes
        
        FOR ENGINEERING TEAM:
        5. Update WorkSpan product mapping configurations
        6. Test partner opportunity matching functionality
        7. Verify co-sell program eligibility rules
        8. Deploy integration updates if required
        
        FOR QA TEAM:
        9. Test end-to-end partner workflows
        10. Verify opportunity generation accuracy
        11. Check reporting and analytics functions
        
        PRIORITY ASSESSMENT:
        Changes to AWS products catalog may affect:
        - Partner opportunity matching algorithms
        - Co-sell program configurations  
        - Integration API mappings
        - Revenue reporting accuracy
        
        TECHNICAL DETAILS:
        - Previous Hash: {previous_hash}
        - Current Hash: {current_hash}
        - Detection Method: SHA256 hash comparison
        - File Size: {len(json_string)} bytes
        
        RESOURCES:
        - Updated file: {file_url}
        - WorkSpan admin: https://app.workspan.com/
        
        Please address these changes promptly to maintain optimal partner program performance.
        
        ---
        AWS Products Monitor | Critical Change Detection"""
            
            # Save email content to files
            with open('email_subject.txt', 'w') as f:
                f.write(subject)
            
            with open('email_body.txt', 'w') as f:
                f.write(body)
            
            print(f"Email prepared: {subject[:60]}...")
        
        # Save run status
        with open('run_status.txt', 'w') as f:
            f.write(f"{should_notify}|{change_type}|{current_hash}|{previous_hash or 'none'}")
        
        print("Monitor script completed successfully")
        EOF
        
    - name: Run monitor script
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python monitor.py
        
    - name: Send email notification
      if: hashFiles('email_body.txt') != ''
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.GMAIL_USERNAME }}
        password: ${{ secrets.GMAIL_APP_PASSWORD }}
        subject: file://email_subject.txt
        body: file://email_body.txt  
        to: ${{ vars.EMAIL_RECIPIENTS }}
        cc: ${{ vars.EMAIL_CC_LIST }}
        bcc: ${{ vars.EMAIL_BCC_LIST }}
        from: ${{ secrets.GMAIL_USERNAME }}
        
    - name: Commit baseline file to repository
      run: |
        if [ -f "file_baseline.txt" ]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add file_baseline.txt
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update AWS products baseline [skip ci]"
            git push
          fi
        fi
        
    - name: Display summary
      run: |
        echo "=================================="
        echo "AWS Products Monitor Summary"
        echo "=================================="
        
        if [ -f "run_status.txt" ]; then
          STATUS=$(cat run_status.txt)
          IFS='|' read -r NOTIFIED TYPE CURRENT PREVIOUS <<< "$STATUS"
          
          case "$TYPE" in
            "first_run")
              echo "STATUS: First run completed"
              echo "BASELINE: $CURRENT established"
              echo "EMAIL: Setup notification sent"
              echo "NEXT: Monitor active for change detection"
              ;;
            "file_changed")
              echo "STATUS: Changes detected and processed"  
              echo "CHANGE: $PREVIOUS -> $CURRENT"
              echo "EMAIL: Change notification sent to team"
              echo "ACTION: Review required by recipients"
              ;;
            "no_change")
              echo "STATUS: No changes detected"
              echo "HASH: $CURRENT (unchanged)"
              echo "EMAIL: No notification sent"
              echo "NEXT: Continuing monitoring"
              ;;
          esac
        else
          echo "STATUS: Unknown - check logs above"
        fi
        
        echo ""
        echo "CONFIGURATION:"
        echo "  Primary: ${{ vars.EMAIL_RECIPIENTS || 'Not configured' }}"
        echo "  CC: ${{ vars.EMAIL_CC_LIST || 'None' }}"
        echo "  BCC: ${{ vars.EMAIL_BCC_LIST || 'None' }}"
        echo ""
        echo "SCHEDULE: Every 5 minutes (testing mode)"
        echo "MANUAL: Actions -> Run workflow"
        echo "=================================="
