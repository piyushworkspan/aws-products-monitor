name: AWS Products Monitor

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

env:
  MONITORED_FILE_URL: 'https://raw.githubusercontent.com/piyushworkspan/AWSCheck/main/aws_products.json'

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Display Configuration
      run: |
        echo "AWS Products Monitor - Multiple Recipients"
        echo "File: ${{ env.MONITORED_FILE_URL }}"
        echo "Recipients: ${{ vars.EMAIL_RECIPIENTS || 'Not configured' }}"
        echo "CC: ${{ vars.EMAIL_CC_LIST || 'None' }}"
        echo "BCC: ${{ vars.EMAIL_BCC_LIST || 'None' }}"
        echo "Time: $(date)"
        
    - name: Install Python dependencies
      run: |
        pip install requests openai
        
    - name: Create monitor script
      run: |
        cat > monitor.py << 'EOF'
        import json
        import os
        import hashlib
        import requests
        from datetime import datetime
        from openai import OpenAI
        
        print("AWS Products Monitor Starting...")
        
        # Download current file
        file_url = os.getenv('MONITORED_FILE_URL')
        print(f"Downloading: {file_url}")
        
        try:
            response = requests.get(file_url, timeout=30)
            response.raise_for_status()
            current_data = response.json()
            print(f"Downloaded: {len(str(current_data))} characters")
        except Exception as e:
            print(f"Download failed: {e}")
            exit(1)
        
        # Calculate file hash
        json_string = json.dumps(current_data, sort_keys=True)
        current_hash = hashlib.sha256(json_string.encode()).hexdigest()[:16]
        print(f"Current hash: {current_hash}")
        
        # Check for previous hash
        baseline_file = 'file_baseline.txt'
        previous_hash = None
        
        if os.path.exists(baseline_file):
            with open(baseline_file, 'r') as f:
                previous_hash = f.read().strip()
            print(f"Previous hash: {previous_hash}")
        else:
            print("No previous baseline found - first run")
        
        # Save current hash as new baseline
        with open(baseline_file, 'w') as f:
            f.write(current_hash)
        
        # Save current data for comparison
        with open('current_data.json', 'w') as f:
            json.dump(current_data, f, indent=2)
        
        # Load previous data if it exists
        previous_data = None
        if os.path.exists('previous_data.json'):
            try:
                with open('previous_data.json', 'r') as f:
                    previous_data = json.load(f)
                print("Previous data loaded for comparison")
            except Exception as e:
                print(f"Could not load previous data: {e}")
        
        # Save current data as previous for next run
        with open('previous_data.json', 'w') as f:
            json.dump(current_data, f, indent=2)
        
        # Determine if notification is needed
        should_notify = False
        change_type = "none"
        
        if previous_hash is None:
            print("First run detected - will send setup notification")
            should_notify = True
            change_type = "first_run"
        elif previous_hash != current_hash:
            print(f"Change detected: {previous_hash} -> {current_hash}")
            should_notify = True  
            change_type = "file_changed"
        else:
            print("No changes detected")
            should_notify = False
            change_type = "no_change"
        
        # Create notification if needed
        if should_notify:
            print("Preparing email notification...")
            
            # Accurate comparison analysis for changes only
            ai_analysis = ""
            if change_type == "file_changed" and previous_data is not None:
                try:
                    print("Performing accurate data comparison...")
                    
                    # Function to extract products with Name and ID
                    def extract_products(data):
                        products = {}
                        if isinstance(data, list):
                            for item in data:
                                if isinstance(item, dict):
                                    name = item.get('Name') or item.get('name') or item.get('ProductName') or item.get('product_name')
                                    id_val = item.get('ID') or item.get('id') or item.get('Id') or item.get('ProductId') or item.get('product_id')
                                    if name and id_val:
                                        products[str(id_val)] = str(name)
                        elif isinstance(data, dict):
                            # Handle different JSON structures
                            for key, value in data.items():
                                if isinstance(value, list):
                                    for item in value:
                                        if isinstance(item, dict):
                                            name = item.get('Name') or item.get('name') or item.get('ProductName') or item.get('product_name')
                                            id_val = item.get('ID') or item.get('id') or item.get('Id') or item.get('ProductId') or item.get('product_id')
                                            if name and id_val:
                                                products[str(id_val)] = str(name)
                                elif isinstance(value, dict):
                                    name = value.get('Name') or value.get('name') or value.get('ProductName') or value.get('product_name')
                                    id_val = value.get('ID') or value.get('id') or value.get('Id') or value.get('ProductId') or value.get('product_id')
                                    if name and id_val:
                                        products[str(id_val)] = str(name)
                        return products
                    
                    # Extract products from both versions
                    current_products = extract_products(current_data)
                    previous_products = extract_products(previous_data)
                    
                    print(f"Current products found: {len(current_products)}")
                    print(f"Previous products found: {len(previous_products)}")
                    
                    # Find differences
                    added_ids = set(current_products.keys()) - set(previous_products.keys())
                    removed_ids = set(previous_products.keys()) - set(current_products.keys())
                    
                    # Find modified (same ID but different Name)
                    modified_ids = []
                    for id_val in set(current_products.keys()) & set(previous_products.keys()):
                        if current_products[id_val] != previous_products[id_val]:
                            modified_ids.append(id_val)
                    
                    print(f"Added: {len(added_ids)}, Removed: {len(removed_ids)}, Modified: {len(modified_ids)}")
                    
                    # Build analysis
                    analysis_parts = ["CHANGE SUMMARY:", ""]
                    
                    # Added products
                    if added_ids:
                        analysis_parts.append("AWS Products Added:")
                        analysis_parts.append("| Name | ID |")
                        analysis_parts.append("|------|-------|")
                        for id_val in sorted(added_ids):
                            name = current_products[id_val]
                            analysis_parts.append(f"| {name} | {id_val} |")
                    else:
                        analysis_parts.append("AWS Products Added:")
                        analysis_parts.append("No new products added")
                    
                    analysis_parts.append("")
                    
                    # Removed products  
                    if removed_ids:
                        analysis_parts.append("AWS Products Removed:")
                        analysis_parts.append("| Name | ID |")
                        analysis_parts.append("|------|-------|")
                        for id_val in sorted(removed_ids):
                            name = previous_products[id_val]
                            analysis_parts.append(f"| {name} | {id_val} |")
                    else:
                        analysis_parts.append("AWS Products Removed:")
                        analysis_parts.append("No products removed")
                    
                    analysis_parts.append("")
                    
                    # Modified products
                    if modified_ids:
                        analysis_parts.append("AWS Products Modified:")
                        analysis_parts.append("| Previous Name | New Name | ID |")
                        analysis_parts.append("|---------------|----------|-----|")
                        for id_val in sorted(modified_ids):
                            old_name = previous_products[id_val]
                            new_name = current_products[id_val]
                            analysis_parts.append(f"| {old_name} | {new_name} | {id_val} |")
                    else:
                        analysis_parts.append("AWS Products Modified:")
                        analysis_parts.append("No product names changed")
                    
                    ai_analysis = "\n".join(analysis_parts)
                    print("Accurate comparison completed")
                    
                except Exception as e:
                    print(f"Comparison analysis failed: {e}")
                    ai_analysis = """CHANGE SUMMARY:

AWS Products Added:
Data structure analysis failed - manual review required

AWS Products Removed:  
Data structure analysis failed - manual review required

AWS Products Modified:
Data structure analysis failed - manual review required"""
            
            elif change_type == "file_changed" and previous_data is None:
                ai_analysis = """CHANGE SUMMARY:

AWS Products Added:
Cannot determine - no previous data for comparison

AWS Products Removed:
Cannot determine - no previous data for comparison  

AWS Products Modified:
Cannot determine - no previous data for comparison"""
            
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
            
            if change_type == "first_run":
                subject = f"AWS Products Monitor - Setup Complete ({datetime.now().strftime('%m/%d %H:%M')})"
                body = f"""AWS Products Monitor Setup Complete
        =====================================
        
        Setup Time: {timestamp}
        File URL: {file_url}
        Baseline Hash: {current_hash}
        
        MONITOR STATUS: 
        The AWS Products Monitor is now active and operational.
        
        WHAT HAPPENS NEXT:
        - Monitor checks for file changes every 5 minutes
        - When changes are detected, you will receive email alerts
        - Each alert will include a simple summary of what changed
        
        RECIPIENT CONFIGURATION:
        To modify who receives notifications:
        1. Go to repository Settings
        2. Navigate to Secrets and variables -> Actions -> Variables  
        3. Edit these variables:
           - EMAIL_RECIPIENTS (primary recipients)
           - EMAIL_CC_LIST (CC recipients)
           - EMAIL_BCC_LIST (BCC recipients)
        
        RESOURCES:
        - Monitored file: {file_url}
        - WorkSpan admin: https://app.workspan.com/
        
        This is a one-time setup notification.
        Future emails will only be sent when the file actually changes.
        
        ---
        AWS Products Monitor | Automated by GitHub Actions"""
                
            else:  # file_changed
                subject = f"AWS Products CHANGED - Review Required ({datetime.now().strftime('%m/%d %H:%M')})"
                body = f"""AWS PRODUCTS FILE CHANGED
        =======================
        
        Change Detected: {timestamp}
        Hash Change: {previous_hash} -> {current_hash}
        File URL: {file_url}
        
        CHANGE SUMMARY:
        {ai_analysis}
        
        Please review the changes and update WorkSpan integration as needed.
        
        RESOURCES:
        - Updated file: {file_url}
        - WorkSpan admin: https://app.workspan.com/
        
        ---
        AWS Products Monitor | Change Detection"""
            
            # Save email content to files
            with open('email_subject.txt', 'w') as f:
                f.write(subject)
            
            with open('email_body.txt', 'w') as f:
                f.write(body)
            
            print(f"Email prepared: {subject[:60]}...")
        
        # Save run status
        with open('run_status.txt', 'w') as f:
            f.write(f"{should_notify}|{change_type}|{current_hash}|{previous_hash or 'none'}")
        
        print("Monitor script completed successfully")
        EOF
        
    - name: Run monitor script
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python monitor.py
        
    - name: Send email notification
      if: hashFiles('email_body.txt') != ''
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.GMAIL_USERNAME }}
        password: ${{ secrets.GMAIL_APP_PASSWORD }}
        subject: file://email_subject.txt
        body: file://email_body.txt  
        to: ${{ vars.EMAIL_RECIPIENTS }}
        cc: ${{ vars.EMAIL_CC_LIST }}
        bcc: ${{ vars.EMAIL_BCC_LIST }}
        from: ${{ secrets.GMAIL_USERNAME }}
        
    - name: Commit data files to repository
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all tracking files
        git add file_baseline.txt previous_data.json current_data.json 2>/dev/null || true
        
        if ! git diff --staged --quiet; then
          git commit -m "Update AWS products baseline and data [skip ci]"
          git push
        else
          echo "No changes to commit"
        fi
        
    - name: Display summary
      run: |
        echo "=================================="
        echo "AWS Products Monitor Summary"
        echo "=================================="
        
        if [ -f "run_status.txt" ]; then
          STATUS=$(cat run_status.txt)
          IFS='|' read -r NOTIFIED TYPE CURRENT PREVIOUS <<< "$STATUS"
          
          case "$TYPE" in
            "first_run")
              echo "STATUS: First run completed"
              echo "BASELINE: $CURRENT established"
              echo "EMAIL: Setup notification sent"
              echo "NEXT: Monitor active for change detection"
              ;;
            "file_changed")
              echo "STATUS: Changes detected and processed"  
              echo "CHANGE: $PREVIOUS -> $CURRENT"
              echo "EMAIL: Change notification sent to team"
              echo "ACTION: Review required by recipients"
              ;;
            "no_change")
              echo "STATUS: No changes detected"
              echo "HASH: $CURRENT (unchanged)"
              echo "EMAIL: No notification sent"
              echo "NEXT: Continuing monitoring"
              ;;
          esac
        else
          echo "STATUS: Unknown - check logs above"
        fi
        
        echo ""
        echo "CONFIGURATION:"
        echo "  Primary: ${{ vars.EMAIL_RECIPIENTS || 'Not configured' }}"
        echo "  CC: ${{ vars.EMAIL_CC_LIST || 'None' }}"
        echo "  BCC: ${{ vars.EMAIL_BCC_LIST || 'None' }}"
        echo ""
        echo "SCHEDULE: Every 5 minutes (testing mode)"
        echo "MANUAL: Actions -> Run workflow"
        echo "=================================="
