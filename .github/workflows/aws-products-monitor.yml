name: AWS Products Monitor

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

env:
  MONITORED_FILE_URL: 'https://raw.githubusercontent.com/aws-samples/partner-crm-integration-samples/main/resources/aws_products.json'
  JIRA_PROJECT_KEY: 'PMT'

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup
      run: |
        echo "AWS Products Monitor - Every 5 minutes"
        echo "File: ${{ env.MONITORED_FILE_URL }}"
        
    - name: Install dependencies
      run: |
        pip install requests openai jira
        
    - name: Run Monitor
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        JIRA_URL: ${{ secrets.JIRA_URL }}
      run: |
        cat > monitor.py << 'EOF'
        import json
        import os
        import hashlib
        import requests
        from datetime import datetime, timedelta
        from openai import OpenAI
        from jira import JIRA
        
        print("AWS Products Monitor Starting...")
        
        # Download current file
        file_url = os.getenv('MONITORED_FILE_URL')
        print(f"Downloading: {file_url}")
        
        try:
            response = requests.get(file_url)
            response.raise_for_status()
            current_data = response.json()
            print(f"File downloaded successfully - {len(str(current_data))} characters")
        except Exception as e:
            print(f"Download failed: {e}")
            exit(1)
        
        # Calculate hash
        current_hash = hashlib.sha256(json.dumps(current_data, sort_keys=True).encode()).hexdigest()
        short_hash = current_hash[:12]
        print(f"File hash: {short_hash}")
        
        # Check JIRA for recent tickets with this hash
        try:
            jira = JIRA(
                server=os.getenv('JIRA_URL'),
                basic_auth=(os.getenv('JIRA_EMAIL'), os.getenv('JIRA_API_TOKEN'))
            )
            
            # Search last 7 days for tickets with this hash
            week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            jql = f'project = PMT AND created >= "{week_ago}" AND summary ~ "AWS Products" ORDER BY created DESC'
            
            recent_issues = jira.search_issues(jql, maxResults=5)
            
            # Check if current hash exists in recent tickets
            hash_exists = False
            for issue in recent_issues:
                if short_hash in issue.fields.description:
                    hash_exists = True
                    print(f"Hash found in recent ticket {issue.key} - no action needed")
                    break
            
            if not hash_exists:
                print("New hash detected - creating JIRA ticket")
                
                # AI Analysis
                try:
                    client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
                    
                    sample_data = str(current_data)[:1500]
                    
                    response = client.chat.completions.create(
                        model="gpt-4",
                        messages=[
                            {"role": "system", "content": "Analyze AWS product catalog for WorkSpan integration team."},
                            {"role": "user", "content": f"AWS products file updated. Hash: {short_hash}. Sample: {sample_data}... Provide brief analysis for WorkSpan team (100 words max)."}
                        ],
                        temperature=0.1,
                        max_tokens=150
                    )
                    
                    ai_summary = response.choices[0].message.content
                    print("AI analysis completed")
                    
                except Exception as e:
                    print(f"AI failed: {e}")
                    ai_summary = "AWS products catalog updated. Review recommended for WorkSpan integration changes."
                
                # Create JIRA ticket
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                
                description = f"""AWS Products Catalog Update
                
        Detection Time: {timestamp} UTC
        File Hash: {short_hash}
        File URL: {file_url}
        
        AI Analysis:
        {ai_summary}
        
        Action Items:
        1. Review AWS products file changes
        2. Update WorkSpan integration mappings  
        3. Test partner opportunity matching
        4. Notify team of catalog updates
        
        Technical Details:
        - Full Hash: {current_hash}
        - Monitor: GitHub Actions
        - Project: WorkSpan AWS Integration
        
        Auto-generated by AWS Products Monitor"""
                
                try:
                    issue = jira.create_issue(fields={
                        'project': {'key': 'PMT'},
                        'summary': f"AWS Products Updated - {timestamp}",
                        'description': description,
                        'issuetype': {'name': 'Task'},
                        'priority': {'name': 'Medium'}
                    })
                    
                    print(f"JIRA ticket created: {issue.key}")
                    print(f"URL: {os.getenv('JIRA_URL')}/browse/{issue.key}")
                    
                except Exception as e:
                    print(f"JIRA creation failed: {e}")
            
        except Exception as e:
            print(f"JIRA connection failed: {e}")
        
        print("Monitor completed")
        EOF
        
        python monitor.py
