name: AWS Products Monitor

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

env:
  MONITORED_FILE_URL: 'https://raw.githubusercontent.com/piyushworkspan/AWSCheck/main/aws_products.json'

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Display Configuration
      run: |
        echo "AWS Products Monitor - Multiple Recipients"
        echo "File: ${{ env.MONITORED_FILE_URL }}"
        echo "Recipients: ${{ vars.EMAIL_RECIPIENTS || 'Not set' }}"
        echo "Time: $(date)"
        
    - name: Install dependencies
      run: |
        pip install requests openai
        
    - name: Monitor and Create Notification
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cat > monitor.py << 'SCRIPT_END'
        import json
        import os
        import hashlib
        import requests
        from datetime import datetime
        from openai import OpenAI
        
        print("AWS Products Monitor Starting...")
        
        # Download file
        file_url = os.getenv('MONITORED_FILE_URL')
        print(f"Downloading: {file_url}")
        
        try:
            response = requests.get(file_url)
            response.raise_for_status()
            current_data = response.json()
            print(f"Downloaded successfully: {len(str(current_data))} chars")
        except Exception as e:
            print(f"Download failed: {e}")
            exit(1)
        
        # Calculate hash
        current_hash = hashlib.sha256(json.dumps(current_data, sort_keys=True).encode()).hexdigest()[:16]
        print(f"Current hash: {current_hash}")
        
        # Check previous hash
        previous_hash = None
        if os.path.exists('baseline.txt'):
            with open('baseline.txt', 'r') as f:
                previous_hash = f.read().strip()
            print(f"Previous hash: {previous_hash}")
        else:
            print("No previous hash found - first run")
        
        # Save current hash
        with open('baseline.txt', 'w') as f:
            f.write(current_hash)
        
        # Determine if notification needed
        send_notification = False
        is_first_run = previous_hash is None
        is_changed = previous_hash and previous_hash != current_hash
        
        if is_first_run:
            print("First run - sending setup notification")
            send_notification = True
            notification_type = "setup"
        elif is_changed:
            print(f"Change detected: {previous_hash} -> {current_hash}")
            send_notification = True
            notification_type = "change"
        else:
            print("No changes detected")
            send_notification = False
            notification_type = "none"
        
        if send_notification:
            print("Preparing email notification...")
            
            # AI Analysis for changes only
            ai_analysis = ""
            if notification_type == "change":
                try:
                    client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
                    
                    response = client.chat.completions.create(
                        model="gpt-4",
                        messages=[
                            {"role": "system", "content": "Analyze AWS product catalog changes for WorkSpan integration team."},
                            {"role": "user", "content": f"AWS products file changed from {previous_hash} to {current_hash}. Provide brief analysis and actions for WorkSpan team (150 words max)."}
                        ],
                        temperature=0.1,
                        max_tokens=200
                    )
                    
                    ai_analysis = response.choices[0].message.content
                    print("AI analysis completed")
                    
                except Exception as e:
                    print(f"AI analysis failed: {e}")
                    ai_analysis = "AI analysis unavailable. Please manually review AWS products catalog for WorkSpan integration impacts."
            
            # Create email content
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
            
            if notification_type == "setup":
                subject = f"AWS Products Monitor - Setup Complete ({datetime.now().strftime('%m/%d %H:%M')})"
                body = f"""AWS Products Monitor Setup Complete
                
Time: {timestamp}
File: {file_url}  
Baseline Hash: {current_hash}

The monitor is now active and will check for changes every 5 minutes.
You'll receive notifications when the AWS products file changes.

To modify recipients:
Settings -> Secrets and variables -> Actions -> Variables
- EMAIL_RECIPIENTS (primary)
- EMAIL_CC_LIST (CC) 
- EMAIL_BCC_LIST (BCC)

Auto-generated setup notification."""
                
            else:  # change detected
                subject = f"AWS Products CHANGED - Action Required ({datetime.now().strftime('%m/%d %H:%M')})"
                body = f"""AWS PRODUCTS FILE CHANGED - REVIEW REQUIRED

Time: {timestamp}
Hash Change: {previous_hash} -> {current_hash}
File: {file_url}

AI Analysis:
{ai_analysis}

Action Items:
1. Review AWS products catalog changes
2. Update WorkSpan integration mappings
3. Test partner opportunity matching  
4. Verify co-sell program rules
5. Notify relevant stakeholders

Technical Details:
- Previous: {previous_hash}
- Current: {current_hash}
- Detection: Automated hash comparison

Resources:
- File: {file_url}
- WorkSpan: https://app.workspan.com/

Please address changes promptly.

Auto-generated change detection."""
            
            # Save email content
            with open('email_subject.txt', 'w') as f:
                f.write(subject)
            
            with open('email_body.txt', 'w') as f:
                f.write(body)
            
            print(f"Email prepared: {subject[:50]}...")
        
        # Save status
        status = f"{send_notification}|{notification_type}|{current_hash}|{previous_hash or 'none'}"
        with open('status.txt', 'w') as f:
            f.write(status)
        
        print("Monitor completed")
        SCRIPT_END
        
        python monitor.py
        
    - name: Send Email
      if: hashFiles('email_body.txt') != ''
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.GMAIL_USERNAME }}
        password: ${{ secrets.GMAIL_APP_PASSWORD }}
        subject: file://email_subject.txt
        body: file://email_body.txt
        to: ${{ vars.EMAIL_RECIPIENTS }}
        cc: ${{ vars.EMAIL_CC_LIST }}
        bcc: ${{ vars.EMAIL_BCC_LIST }}
        from: ${{ secrets.GMAIL_USERNAME }}
        
    - name: Commit baseline
      run: |
        if [ -f "baseline.txt" ]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add baseline.txt
          git commit -m "Update baseline" || echo "No changes"
          git push || echo "Push may have failed"
        fi
        
    - name: Summary
      run: |
        echo "=== Monitor Summary ==="
        
        if [ -f "status.txt" ]; then
          STATUS=$(cat status.txt)
          IFS='|' read -r SENT TYPE CURRENT PREV <<< "$STATUS"
          
          if [ "$SENT" = "True" ]; then
            echo "Notification sent: $TYPE"
            echo "Hash: $PREV -> $CURRENT"
          else
            echo "No notification needed"
            echo "Hash unchanged: $CURRENT"
          fi
        fi
        
        echo "Recipients: ${{ vars.EMAIL_RECIPIENTS || 'Not configured' }}"
        echo "Next check: In 5 minutes"
